<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>imicola&#039;s Blog</title>
      <link>https://imicola.github.io</link>
      <description>最近的10条笔记 on imicola&#039;s Blog</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>笔记属性</title>
    <link>https://imicola.github.io/%E6%A8%A1%E6%9D%BF/%E7%AC%94%E8%AE%B0%E5%B1%9E%E6%80%A7</link>
    <guid>https://imicola.github.io/%E6%A8%A1%E6%9D%BF/%E7%AC%94%E8%AE%B0%E5%B1%9E%E6%80%A7</guid>
    <description><![CDATA[  ]]></description>
    <pubDate>Tue, 22 Jul 2025 14:09:03 GMT</pubDate>
  </item><item>
    <title>在之前</title>
    <link>https://imicola.github.io/imicola%E7%9A%84%E6%80%9D%E7%BB%AA%E5%B0%8F%E5%B1%8B/%E5%9C%A8%E4%B9%8B%E5%89%8D</link>
    <guid>https://imicola.github.io/imicola%E7%9A%84%E6%80%9D%E7%BB%AA%E5%B0%8F%E5%B1%8B/%E5%9C%A8%E4%B9%8B%E5%89%8D</guid>
    <description><![CDATA[ 一份人生不应该只有理性的学习与对学业事业的偏执追求，一份人生包含的应该是万物，是存在与世界上的，能被我们所看到的光景。也有属于我们自己的理想与思考. ]]></description>
    <pubDate>Mon, 21 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>sort</title>
    <link>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/sort</link>
    <guid>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/sort</guid>
    <description><![CDATA[  ]]></description>
    <pubDate>Mon, 21 Jul 2025 14:52:33 GMT</pubDate>
  </item><item>
    <title>sed</title>
    <link>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/sed</link>
    <guid>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/sed</guid>
    <description><![CDATA[ sed(stream editor) 是非交互式文本流编辑器，它逐行处理文本，依据输入的指令对文本进行转换 基本用法 sed [选项] &#039;脚本&#039; 文件名 # 或者 命令 | sed [选项] &#039;脚本&#039; Tip sed 命令的构造是抽象的，这里我们只举一些常用例子 替换 语法 ： s/正则表达式/替换内容/标注 标注: 可选参数 g 替换所有匹配项目(默认只会替换每行第一个) i 忽略大小写 p 打印发生替换的行 (需要与-n选项一起使用) w 将更改写入文件 例如：将系统日志中所有”Error”(忽略大小写)变成”ERROR!!” 并且打印 journa... ]]></description>
    <pubDate>Mon, 21 Jul 2025 03:51:18 GMT</pubDate>
  </item><item>
    <title>数位DP</title>
    <link>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/DP-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8DDP</link>
    <guid>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/DP-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8DDP</guid>
    <description><![CDATA[  ]]></description>
    <pubDate>Sat, 19 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>less</title>
    <link>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/less</link>
    <guid>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/less</guid>
    <description><![CDATA[ less 命令是一个非常强大的 Linux 工具，用于在终端中查看文件内容或输入内容。 它比 cat 命令更适合查看大文件，因为它不会一次性将整个文件加载到内存中，而是允许你逐页或逐行浏览。 基本用法 基本语法是: less [文件名称] 如我们要查看 file.txt 的内容可以输入 less file.txt less界面操作 与vim类似的是,less界面使用 j k 空格 b 来进行基本的导航 j k 向 下/上 滚动一行 空格 b 向 下/上 滚动一页 g G 跳转到文件 头/尾 {数字} + g/G 跳转到指定行 d u 向 前/后 滚动半屏 搜索 / 向下搜索,使用 n/N 导航... ]]></description>
    <pubDate>Sat, 19 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>数据整理</title>
    <link>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/MIT-Missing-Semester/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86</link>
    <guid>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/MIT-Missing-Semester/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86</guid>
    <description><![CDATA[ 当我们试图在输出很多的地方(系统日志,长文本)中找到自己需要的东西的时候,我们就需要进行数据的整理 在之前的学习中,我们就已经接触过一些数据整理的基本技术.比如当我们使用 | 管道运算符向 grep 发送东西的时候,实际上就是一种数据整理,例如 history | grep &quot;grep&quot; 就是在我输入过的命令中寻找 grep 如何进行数据整理 在linux里进行数据整理最核心的就是grep类的命令 例如当我们试图在系统日志中找到 imicola 使用 root 用命令做过多少坏事,那么我们就可以用 $ journalctl | grep imicola 来获取日志中所有含有... ]]></description>
    <pubDate>Sat, 19 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>杂项练习笔记1</title>
    <link>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9%E7%AC%94%E8%AE%B0/%E6%9D%82%E9%A1%B9%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B01</link>
    <guid>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9%E7%AC%94%E8%AE%B0/%E6%9D%82%E9%A1%B9%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B01</guid>
    <description><![CDATA[ 杂项练习 0 点子王 万能头文件 #include&lt;bits/stdc++.h&gt;(可以解决大部分头文件问题) 使用 printf(&quot;%.2f&quot;,[输出])来输出保留两位的小数 小写字母的ASCII码是大写字母的ASCII + 32 在处理时间问题时，我们不妨全部转化为最小的时间单位，再用循环回复时间格式 字符串/字符 进行比较的时候要用stramp(a,b) 当 str1 &lt; str2 时，返回为负数(-1)； 当 str1 == str2 时，返回值= 0； 当 str1 &gt; str2 时，返回正数(1)。 Tip 更新：对字符串来说也可以用 ==... ]]></description>
    <pubDate>Fri, 18 Jul 2025 03:33:54 GMT</pubDate>
  </item><item>
    <title>BFS 广度优先搜索</title>
    <link>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/BFS-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2</link>
    <guid>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/BFS-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2</guid>
    <description><![CDATA[ 搜索 递归与递推 BFS 广度优先搜索 在前面我们介绍过深度优先搜索 DFS，深搜的核心思想是一条路走到底，直到得到符合的结果或者超出边界情况结束 而广度优先搜索则是从起始位置出发，每一次向外增加一圈，或执行完一大个操作之后再将计数变量增加 广搜一般适用于求最短路径，求最少操作次数的这些操作，因为广搜本身便是向外扩散式的一种搜索 广搜一般使用STL中的Queue 队列作为承接模板，通过其先进先出的特点实现广搜 例题：洛谷P1135 奇怪的电梯 signed main() { int n, a, b; cin &gt;&gt; n &gt;&gt; a &gt;&gt; b; vector&lt... ]]></description>
    <pubDate>Thu, 17 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>Boyer-Moore 投票算法</title>
    <link>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/Boyer-Moore-%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95</link>
    <guid>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/Boyer-Moore-%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95</guid>
    <description><![CDATA[ 模拟 模板 Boyer-Moore 投票算法 背景：数组中占比超过一半的元素称之为主要元素。给你一个 整数 数组，找出其中的主要元素，若不存在，输出 -1 一般我们习惯想到的方法是利用unordered_map 来存储每个数出现的次数，当发现有数字超过一半的时候，输出该数字，没有则在最后输出 -1 上述方法时间复杂度和空间复杂度均为 O(n) ,而接下来介绍的算法，可以让空间复杂度降低到 O(1) Boyer-Moore 投票算法的基本思想是：在每一轮投票过程中，从数组中删除两个不同的元素，直到投票过程无法继续，此时数组为空或者数组中剩下的元素都相等 如果数组为空，则数组不存在主要元素 如果数... ]]></description>
    <pubDate>Thu, 17 Jul 2025 16:00:00 GMT</pubDate>
  </item>
    </channel>
  </rss>