<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>imicola&#039;s Blog</title>
      <link>https://imicola.github.io</link>
      <description>最近的10条笔记 on imicola&#039;s Blog</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>笔记属性</title>
    <link>https://imicola.github.io/%E6%A8%A1%E6%9D%BF/%E7%AC%94%E8%AE%B0%E5%B1%9E%E6%80%A7</link>
    <guid>https://imicola.github.io/%E6%A8%A1%E6%9D%BF/%E7%AC%94%E8%AE%B0%E5%B1%9E%E6%80%A7</guid>
    <description><![CDATA[  ]]></description>
    <pubDate>Tue, 12 Aug 2025 08:23:46 GMT</pubDate>
  </item><item>
    <title>CS61A 计算机程序结构与解释</title>
    <link>https://imicola.github.io/TODO/CS61%E7%B3%BB%E5%88%97/CS61A-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E4%B8%8E%E8%A7%A3%E9%87%8A</link>
    <guid>https://imicola.github.io/TODO/CS61%E7%B3%BB%E5%88%97/CS61A-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E4%B8%8E%E8%A7%A3%E9%87%8A</guid>
    <description><![CDATA[ CS61系列是伯克利CS专业入门课，其中： CS61A强调抽象，让学生掌握用程序来解决实际问题，而不关注底层的硬件细节。 注意CS61A虽然明面上是Python的语言课程，其中会有很多抽象的思想和程序构造与运行的原理 本课程一共39课时，使用记录式学习而非任务驱动，而具体安排将会被放在 google tasks Lecture1 : Wecome [7.24 → 7.26] Lecture2 : Functions [7.26 → ?](中间爽玩了三天) Lecture3 : . ]]></description>
    <pubDate>Wed, 30 Jul 2025 07:49:56 GMT</pubDate>
  </item><item>
    <title>语言类型与转换</title>
    <link>https://imicola.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/CS61A/Something/%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BD%AC%E6%8D%A2</link>
    <guid>https://imicola.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/CS61A/Something/%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BD%AC%E6%8D%A2</guid>
    <description><![CDATA[ 我们可以这样说明 C++类需要显式说明某一个变量名称是什么类型的语言我们将其称为静态语言 py类无需显式说明的我们称之为动态语言 在Python中 a = 114 a = &quot;514&quot; b = 1919 b = a 这一系列操作的都是合法的，Python的变量本身并不绑定一个特定的类型，而是 引用 一个值。当我们进行赋值时，变量只是指向内存中一个对象的标签。这个对象可以是任何类型，并且这个标签可以随时被重新指向另一个不同类型的对象。. ]]></description>
    <pubDate>Sat, 26 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>Python同名函数传参</title>
    <link>https://imicola.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/CS61A/Something/Python%E5%90%8C%E5%90%8D%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82</link>
    <guid>https://imicola.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/CS61A/Something/Python%E5%90%8C%E5%90%8D%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82</guid>
    <description><![CDATA[ 在Python中没有像C++那样直接的函数重载(Function Overloading), C++ 允许你定义多个同名函数，只要它们的参数列表(参数类型、参数数量或参数顺序)不同即可。 编译器会根据传入的参数类型自动选择正确的函数版本。 Python 采取了一种不同的方式来处理类似的需求： 1.默认参数 在 Python 中你可以给函数的参数设置默认值，这样在调用函数时就可以选择性地省略这些参数 def pow(base, exp , mod = None): &quot;&quot;&quot; 计算模下的base的exp次幂,如果mod不为None,则计算模mod的结果。 &quot;&... ]]></description>
    <pubDate>Sat, 26 Jul 2025 07:29:41 GMT</pubDate>
  </item><item>
    <title>2.Functions</title>
    <link>https://imicola.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/CS61A/2.Functions</link>
    <guid>https://imicola.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/CS61A/2.Functions</guid>
    <description><![CDATA[ 2.1.编程要素 编程语言不仅是一种指挥计算机执行任务的手段，它应该成为一种框架，使我们能够在其中组织我们的有关计算过程的思想。 同时，程序也在编程社区中传递想法，所以，编程语言必须是人类可以阅读的并且恰巧可以被机器执行 2.1.1表达式 在上一节中我们解释的Python的解释器，下面我们将重新开始，一步步讲解Python语言 我们先从最基本的表达式开始 数字 number &gt;&gt;&gt; 42 42 &gt;&gt;&gt; pi Traceback (most recent call last): File &quot;&lt;python-input-1&gt;&quot;, ... ]]></description>
    <pubDate>Fri, 25 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>最好的linux发行版——WSL2的使用</title>
    <link>https://imicola.github.io/Linux/%E6%8A%98%E8%85%BE/%E6%9C%80%E5%A5%BD%E7%9A%84linux%E5%8F%91%E8%A1%8C%E7%89%88%E2%80%94%E2%80%94WSL2%E7%9A%84%E4%BD%BF%E7%94%A8</link>
    <guid>https://imicola.github.io/Linux/%E6%8A%98%E8%85%BE/%E6%9C%80%E5%A5%BD%E7%9A%84linux%E5%8F%91%E8%A1%8C%E7%89%88%E2%80%94%E2%80%94WSL2%E7%9A%84%E4%BD%BF%E7%94%A8</guid>
    <description><![CDATA[ 在微软开源WSL2之前我就已经对WSL2产生了十足的好感，没想到微软直接开源了WSL2,现在WSL2社区也是好起来了，只看 wsl --list online 上的发行版就达到了20种 正话：什么是WSL? wsl全称是 Windows Subsystem for Linux,即适用于 Linux 的 Windows 子系统，可以让你在 Windows 上近乎无损的使用 Linux 命令行 下面我提供一种配置方式，采用发行版是 manjaro for wsl2 配置 先看效果： 第一步，你需要先去 github 下载 manjaro for wsl2的发行版 release 下载后解压文件并双... ]]></description>
    <pubDate>Thu, 24 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>版本控制(Git)</title>
    <link>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/MIT-Missing-Semester/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6(Git)</link>
    <guid>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/MIT-Missing-Semester/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6(Git)</guid>
    <description><![CDATA[ 版本控制系统(VCSs)是一类用于追踪源代码(或其他文件、文件夹)改动的工具。顾名思义，这些工具可以帮助我们实行版本控制和管理代码/文件的修改历史 即使我们一个人进行工作，git都可以帮我们建立快照，记录每个改动的目的，基于多分支并行开发。而在多人协作开发的时候，我们可以看见别人对项目的修改，也可以解决并行开发从而引起的冲突 而在现代IDE的加持和git的现代化下，我们可以很轻易的了解到git储存库内的提交和修改，也可以用可视化的方式看到git并行开发的数据 要学习git的基本命令与操作我会建议你去 git小游戏 上进行游玩学习，而这里面会教授大部分git命令，所以我们在此不多赘述. ]]></description>
    <pubDate>Thu, 24 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>1.Introduce</title>
    <link>https://imicola.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/CS61A/1.Introduce</link>
    <guid>https://imicola.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/CS61A/1.Introduce</guid>
    <description><![CDATA[  在开始前必须明确，本课程在不说明的情况下所有的程序运行均在 manjaro for wsl2 下执行，一些不涉及大型项目的操作与作业程序也均在上述操作系统下进行 1.0.导论 在学习这个课程之前，建议先修课程 程序设计基础 MIT-Missing-Semester (可选) 为了定义计算过程，我们需要一种被人们广泛使用和各类电脑广泛接受的编程语言，在本课程中，我们将主要使用 Python 语言。 因为这一门课程都会使用Python作为编程语言，所以必须好好配置我们的编程环境 我这里选择 Visual Studio Code + wsl2 进行编写代码 由于Linux的原因，我们可以非常轻松的... ]]></description>
    <pubDate>Wed, 23 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>kill</title>
    <link>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/kill</link>
    <guid>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/kill</guid>
    <description><![CDATA[ Linux的 kill 命令用于向进程发送指定信号以终止或控制进程。 默认情况下，它发送SIGTERM通知进程优雅退出，允许程序执行清理操作。 若进程无响应，可使用-9参数发送SIGKILL强制终止（如kill -9 PID）。 需通过ps、pgrep等命令获取目标进程的PID（进程ID）。常用参数包括：-l列出所有信号，-p指定进程组等。 注意：强制终止可能导致数据丢失，操作前需谨慎确认PID；部分情况需管理员权限（如终止系统进程）。例如：killall nginx可终止所有nginx进程。 . ]]></description>
    <pubDate>Tue, 22 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>sort</title>
    <link>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/sort</link>
    <guid>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/sort</guid>
    <description><![CDATA[ sort 命令简介 sort 命令是 Linux/Unix 系统中一个非常实用的工具，主要用于对文本文件的行进行排序。它可以根据不同的规则对文本内容进行升序或降序排列。 基本用法 最简单的用法是直接对文件进行排序并输出到标准输出： sort filename 这会按字母顺序（默认升序）排列 filename 中的每一行。 常用选项 -r (或 --reverse):反向排序（降序）。 sort -r filename -n (或 --numeric-sort): 按数值排序。当行中包含数字时，这个选项会按照数字的大小而不是字母顺序来排序。 sort -n filename -k (或 --ke... ]]></description>
    <pubDate>Tue, 22 Jul 2025 16:00:00 GMT</pubDate>
  </item>
    </channel>
  </rss>