<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>imicola&#039;s Blog</title>
      <link>https://imicola.github.io</link>
      <description>最近的10条笔记 on imicola&#039;s Blog</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>笔记属性</title>
    <link>https://imicola.github.io/%E6%A8%A1%E6%9D%BF/%E7%AC%94%E8%AE%B0%E5%B1%9E%E6%80%A7</link>
    <guid>https://imicola.github.io/%E6%A8%A1%E6%9D%BF/%E7%AC%94%E8%AE%B0%E5%B1%9E%E6%80%A7</guid>
    <description><![CDATA[  ]]></description>
    <pubDate>Sat, 13 Sep 2025 16:56:15 GMT</pubDate>
  </item><item>
    <title>3.SQL语言</title>
    <link>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E8%AF%BE%E4%B8%8A%E6%95%99%E5%AD%A6/3.SQL%E8%AF%AD%E8%A8%80</link>
    <guid>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E8%AF%BE%E4%B8%8A%E6%95%99%E5%AD%A6/3.SQL%E8%AF%AD%E8%A8%80</guid>
    <description><![CDATA[  ]]></description>
    <pubDate>Wed, 10 Sep 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>4.数据的表示</title>
    <link>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AF%BE%E4%B8%8A%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA</link>
    <guid>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AF%BE%E4%B8%8A%E7%AC%94%E8%AE%B0/4.%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA</guid>
    <description><![CDATA[  ]]></description>
    <pubDate>Wed, 10 Sep 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>未命名</title>
    <link>https://imicola.github.io/%E6%9D%82%E9%A1%B9/Latex/%E6%9C%AA%E5%91%BD%E5%90%8D</link>
    <guid>https://imicola.github.io/%E6%9D%82%E9%A1%B9/Latex/%E6%9C%AA%E5%91%BD%E5%90%8D</guid>
    <description><![CDATA[  ]]></description>
    <pubDate>Wed, 10 Sep 2025 13:51:31 GMT</pubDate>
  </item><item>
    <title>4.事件的独立性</title>
    <link>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/4.%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%8B%AC%E7%AB%8B%E6%80%A7</link>
    <guid>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/4.%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%8B%AC%E7%AB%8B%E6%80%A7</guid>
    <description><![CDATA[  定义: 若P(AB) = P(A)P(B)则称AB 相互独立 Tip 若{A,B},{\overline{A}B},{A\overline{B}},{\overline{A}\ \overline{B}}中有一组互相独立,则其余三组都互相独立 若P(A) = 1 \text{ or } 0 ,则对任意B,AB独立 若P(A) &gt; 0 \text{ and }P(B) &gt; 0,则AB互不相容与AB独立不能同时出现 三事件互相独立 若ABC两两独立且P(ABC) = P(A)P(B)P(C) ,则称ABC相互独立 性质 若AB独立,则P(A) = P(A|B) . ]]></description>
    <pubDate>Wed, 10 Sep 2025 01:46:42 GMT</pubDate>
  </item><item>
    <title>systemd问题</title>
    <link>https://imicola.github.io/%E6%9D%82%E9%A1%B9/systemd%E9%97%AE%E9%A2%98</link>
    <guid>https://imicola.github.io/%E6%9D%82%E9%A1%B9/systemd%E9%97%AE%E9%A2%98</guid>
    <description><![CDATA[ 今天在使用 manjaro for wsl 时候本来为了安装数据库系统的数据库管理软件在wsl里,显然对于这种数据库管理软件而言是依靠 serve 服务来运行的,这种运行依靠一个名字叫做 systemd 的服务管理器进行的.其 PID=1 今天尝试使用 PostgreSQL 时候,在启动服务应该输入 sudo systemctl start postgersql 时候报出: System has not been booted with systemd as init system (PID 1). ]]></description>
    <pubDate>Mon, 08 Sep 2025 12:20:27 GMT</pubDate>
  </item><item>
    <title>CS61A 计算机程序结构与解释</title>
    <link>https://imicola.github.io/TODO/CS61%E7%B3%BB%E5%88%97/CS61A-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E4%B8%8E%E8%A7%A3%E9%87%8A</link>
    <guid>https://imicola.github.io/TODO/CS61%E7%B3%BB%E5%88%97/CS61A-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E4%B8%8E%E8%A7%A3%E9%87%8A</guid>
    <description><![CDATA[ CS61系列是伯克利CS专业入门课，其中： CS61A强调抽象，让学生掌握用程序来解决实际问题，而不关注底层的硬件细节。 注意CS61A虽然明面上是Python的语言课程，其中会有很多抽象的思想和程序构造与运行的原理 本课程一共39课时，使用记录式学习而非任务驱动，而具体安排将会被放在 google tasks Lecture1 : Wecome [7.24 → 7.26] Lecture2 : Functions [7.26 → ?](中间爽玩了三天) Lecture3 : . ]]></description>
    <pubDate>Mon, 08 Sep 2025 03:19:03 GMT</pubDate>
  </item><item>
    <title>快速组合数</title>
    <link>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/%E6%95%B0%E8%AE%BA/%E5%BF%AB%E9%80%9F%E7%BB%84%E5%90%88%E6%95%B0</link>
    <guid>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/%E6%95%B0%E8%AE%BA/%E5%BF%AB%E9%80%9F%E7%BB%84%E5%90%88%E6%95%B0</guid>
    <description><![CDATA[ 通过预处理阶乘 + 逆元的方式快速计算\begin{pmatrix}n \\ k\end{pmatrix},在计算大组合数时候采用,在数字大于模数时候采用 Lucas 定理 Lucas 定理 对于质数p有组合数公式 C(n,k) = \frac{n!}{k!(n-k)!} \pmod p 当n &lt; p 时候可以直接使用阶乘求: C(n,k) = fac[n]\cdot inv\_fac[k]\cdot inv\_{[n-k]} \bmod p 当n \geq p时候,Lucas定理告诉我们: C(n,k) \bmod p = C\left(\left\lfloor \frac{n}{p}... ]]></description>
    <pubDate>Thu, 04 Sep 2025 16:33:51 GMT</pubDate>
  </item><item>
    <title>DP问题全记录</title>
    <link>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/DP-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/DP%E9%97%AE%E9%A2%98%E5%85%A8%E8%AE%B0%E5%BD%95</link>
    <guid>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/DP-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/DP%E9%97%AE%E9%A2%98%E5%85%A8%E8%AE%B0%E5%BD%95</guid>
    <description><![CDATA[ Q1 CF2135A 我们定义一个块(block)为其中所有元素都等于数组长度的数组。例如，[3,3,3]、[1] 和 [4,4,4,4] 都是块，而 [1,1,1] 和 [2,3,3] 则不是。 若一个数组可以通过任意数量(可能为零)的块连接而成，则称其为整洁数组(neat array)。注意空数组总是整洁的。 给定一个由 n 个整数组成的数组 a，请找出其最长的整洁子序列∗的长度。 ∗序列 c 是序列 a 的子序列，当且仅当 c 可以通过从 a 的任意位置删除若干个(可能为零或全部)元素得到。 Ac代码 void solve() { int n; cin &gt;&gt; n; vint ... ]]></description>
    <pubDate>Thu, 04 Sep 2025 16:33:51 GMT</pubDate>
  </item><item>
    <title>C++模板</title>
    <link>https://imicola.github.io/ACM/%E5%A5%87%E5%A6%99C++%E7%94%A8%E6%B3%95/C++%E6%A8%A1%E6%9D%BF</link>
    <guid>https://imicola.github.io/ACM/%E5%A5%87%E5%A6%99C++%E7%94%A8%E6%B3%95/C++%E6%A8%A1%E6%9D%BF</guid>
    <description><![CDATA[ C++模板是一个强大的通用性工具,其用法为template &lt;typename T&gt; 这个语法允许我们传入非固定的类型并且根据这个类型进行程序编写 C++模板分为两种模板: 函数模板 和 类模板 函数模板 你定义一个通用的函数，其中一个或多个参数的类型是泛型（用一个占位符表示），而不是固定的类型，例如int或double。当你在代码中调用这个函数时，编译器会根据你传入的参数类型自动推断并实例化（instantiate）出一个具体的函数版本。 template&lt;typename T&gt; void swapT(T &amp;a, T &amp;b){ T temp; temp... ]]></description>
    <pubDate>Thu, 04 Sep 2025 16:33:51 GMT</pubDate>
  </item>
    </channel>
  </rss>