<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>imicola&#039;s Blog</title>
      <link>https://imicola.github.io</link>
      <description>最近的10条笔记 on imicola&#039;s Blog</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>笔记属性</title>
    <link>https://imicola.github.io/%E6%A8%A1%E6%9D%BF/%E7%AC%94%E8%AE%B0%E5%B1%9E%E6%80%A7</link>
    <guid>https://imicola.github.io/%E6%A8%A1%E6%9D%BF/%E7%AC%94%E8%AE%B0%E5%B1%9E%E6%80%A7</guid>
    <description><![CDATA[  ]]></description>
    <pubDate>Wed, 23 Jul 2025 10:12:37 GMT</pubDate>
  </item><item>
    <title>CS61A 计算机程序结构与解释</title>
    <link>https://imicola.github.io/TODO/CS61%E7%B3%BB%E5%88%97/CS61A-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E4%B8%8E%E8%A7%A3%E9%87%8A</link>
    <guid>https://imicola.github.io/TODO/CS61%E7%B3%BB%E5%88%97/CS61A-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E4%B8%8E%E8%A7%A3%E9%87%8A</guid>
    <description><![CDATA[ CS61系列是伯克利CS专业入门课，其中： CS61A强调抽象，让学生掌握用程序来解决实际问题，而不关注底层的硬件细节。 注意CS61A虽然明面上是Python的语言课程，其中会有很多抽象的思想和程序构造与运行的原理 本课程一共39课时，使用记录式学习而非任务驱动，而具体安排将会被放在 google tasks Lecture1 : Wecome [ ] . ]]></description>
    <pubDate>Wed, 23 Jul 2025 04:21:07 GMT</pubDate>
  </item><item>
    <title>kill</title>
    <link>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/kill</link>
    <guid>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/kill</guid>
    <description><![CDATA[ Linux的 kill 命令用于向进程发送指定信号以终止或控制进程。 默认情况下，它发送SIGTERM通知进程优雅退出，允许程序执行清理操作。 若进程无响应，可使用-9参数发送SIGKILL强制终止（如kill -9 PID）。 需通过ps、pgrep等命令获取目标进程的PID（进程ID）。常用参数包括：-l列出所有信号，-p指定进程组等。 注意：强制终止可能导致数据丢失，操作前需谨慎确认PID；部分情况需管理员权限（如终止系统进程）。例如：killall nginx可终止所有nginx进程。 . ]]></description>
    <pubDate>Tue, 22 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>sort</title>
    <link>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/sort</link>
    <guid>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/sort</guid>
    <description><![CDATA[ sort 命令简介 sort 命令是 Linux/Unix 系统中一个非常实用的工具，主要用于对文本文件的行进行排序。它可以根据不同的规则对文本内容进行升序或降序排列。 基本用法 最简单的用法是直接对文件进行排序并输出到标准输出： sort filename 这会按字母顺序（默认升序）排列 filename 中的每一行。 常用选项 -r (或 --reverse):反向排序（降序）。 sort -r filename -n (或 --numeric-sort): 按数值排序。当行中包含数字时，这个选项会按照数字的大小而不是字母顺序来排序。 sort -n filename -k (或 --ke... ]]></description>
    <pubDate>Tue, 22 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>命令行环境</title>
    <link>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/MIT-Missing-Semester/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%8E%AF%E5%A2%83</link>
    <guid>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/MIT-Missing-Semester/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%8E%AF%E5%A2%83</guid>
    <description><![CDATA[ 当我们在学习这一门课程的时候，我们是否发现自己都在一个进程中进行工作，而有的时候我们需要更好的工作，就需要对多个命令和进程之间进行协调 在这一节中我们将学习一些改善我们工作流与体验的操作思想 进程控制 某些情况下我们需要中断正在执行的任务，比如当find在递归搜索一个非常大的目录的时候，大多数情况下，我们都可以使用 Ctrl-c 来停止命令的执行 但是在有的时候，会无法结束进程，这需要我们去深入探讨其底层原理 结束进程 我们的shell在结束一个进程的时候，通常都是发送一个信号来 “通知” 进程结束，这个进程接受到这个信号后会做出一系列反应。就这一点而言，信号是一直 软件中断 在上面的例子中，... ]]></description>
    <pubDate>Tue, 22 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>在之前</title>
    <link>https://imicola.github.io/imicola%E7%9A%84%E6%80%9D%E7%BB%AA%E5%B0%8F%E5%B1%8B/%E5%9C%A8%E4%B9%8B%E5%89%8D</link>
    <guid>https://imicola.github.io/imicola%E7%9A%84%E6%80%9D%E7%BB%AA%E5%B0%8F%E5%B1%8B/%E5%9C%A8%E4%B9%8B%E5%89%8D</guid>
    <description><![CDATA[ 一份人生不应该只有理性的学习与对学业事业的偏执追求，一份人生包含的应该是万物，是存在与世界上的，能被我们所看到的光景。也有属于我们自己的理想与思考. ]]></description>
    <pubDate>Mon, 21 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>sed</title>
    <link>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/sed</link>
    <guid>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/sed</guid>
    <description><![CDATA[ sed(stream editor) 是非交互式文本流编辑器，它逐行处理文本，依据输入的指令对文本进行转换 基本用法 sed [选项] &#039;脚本&#039; 文件名 # 或者 命令 | sed [选项] &#039;脚本&#039; Tip sed 命令的构造是抽象的，这里我们只举一些常用例子 替换 语法 ： s/正则表达式/替换内容/标注 标注: 可选参数 g 替换所有匹配项目(默认只会替换每行第一个) i 忽略大小写 p 打印发生替换的行 (需要与-n选项一起使用) w 将更改写入文件 例如：将系统日志中所有”Error”(忽略大小写)变成”ERROR!!” 并且打印 journa... ]]></description>
    <pubDate>Mon, 21 Jul 2025 03:51:18 GMT</pubDate>
  </item><item>
    <title>数位DP</title>
    <link>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/DP-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8DDP</link>
    <guid>https://imicola.github.io/ACM/%E7%AE%97%E6%B3%95/DP-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8DDP</guid>
    <description><![CDATA[  ]]></description>
    <pubDate>Sat, 19 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>less</title>
    <link>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/less</link>
    <guid>https://imicola.github.io/Linux/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/less</guid>
    <description><![CDATA[ less 命令是一个非常强大的 Linux 工具，用于在终端中查看文件内容或输入内容。 它比 cat 命令更适合查看大文件，因为它不会一次性将整个文件加载到内存中，而是允许你逐页或逐行浏览。 基本用法 基本语法是: less [文件名称] 如我们要查看 file.txt 的内容可以输入 less file.txt less界面操作 与vim类似的是,less界面使用 j k 空格 b 来进行基本的导航 j k 向 下/上 滚动一行 空格 b 向 下/上 滚动一页 g G 跳转到文件 头/尾 {数字} + g/G 跳转到指定行 d u 向 前/后 滚动半屏 搜索 / 向下搜索,使用 n/N 导航... ]]></description>
    <pubDate>Sat, 19 Jul 2025 16:00:00 GMT</pubDate>
  </item><item>
    <title>数据整理</title>
    <link>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/MIT-Missing-Semester/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86</link>
    <guid>https://imicola.github.io/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/MIT-Missing-Semester/%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86</guid>
    <description><![CDATA[ 当我们试图在输出很多的地方(系统日志,长文本)中找到自己需要的东西的时候,我们就需要进行数据的整理 在之前的学习中,我们就已经接触过一些数据整理的基本技术.比如当我们使用 | 管道运算符向 grep 发送东西的时候,实际上就是一种数据整理,例如 history | grep &quot;grep&quot; 就是在我输入过的命令中寻找 grep 如何进行数据整理 在linux里进行数据整理最核心的就是grep类的命令 例如当我们试图在系统日志中找到 imicola 使用 root 用命令做过多少坏事,那么我们就可以用 $ journalctl | grep imicola 来获取日志中所有含有... ]]></description>
    <pubDate>Sat, 19 Jul 2025 16:00:00 GMT</pubDate>
  </item>
    </channel>
  </rss>